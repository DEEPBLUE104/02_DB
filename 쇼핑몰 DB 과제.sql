ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;

CREATE USER kh_shop IDENTIFIED BY 1234;

DROP USER kh_shop;

GRANT CREATE SESSION TO kh_shop;

GRANT CREATE TABLE TO kh_shop;

ALTER USER kh_shop DEFAULT TABLESPACE 
SYSTEM QUOTA UNLIMITED ON SYSTEM; 

CREATE TABLE CATEGORIES(
	CATEGORY_ID NUMBER PRIMARY KEY,
	CATEGORY_NAME VARCHAR2(100) UNIQUE
);

CREATE TABLE PRODUCTS(
 PRODUCT_ID NUMBER PRIMARY KEY,
 PRODUCT_NAME VARCHAR2(100) NOT NULL,
 CATEGORY NUMBER,
 PRICE NUMBER DEFAULT 0,
 STOCK_QUANTITY NUMBER DEFAULT 0,
 CONSTRAINTS FK_CATEGORIES FOREIGN KEY (CATEGORY)  
 REFERENCES CATEGORIES (CATEGORY_ID)
);

CREATE TABLE CUSTOMERS (
 CUSTOMER_ID NUMBER PRIMARY KEY,
 NAME VARCHAR2(20) NOT NULL,
 GENDER CHAR(3) CHECK (GENDER IN ('남','여')),
 ADDRESS VARCHAR2(100),
 PHONE VARCHAR2(30)
);

CREATE TABLE ORDERS(
 ORDER_ID NUMBER PRIMARY KEY,
 ORDER_DATE DATE DEFAULT SYSDATE,
 STATUS CHAR(1) DEFAULT 'N' CHECK (STATUS IN ('Y','N')),
 CUSTOMER_ID NUMBER,
 CONSTRAINTS FK_CUSTOMERS FOREIGN KEY (CUSTOMER_ID)
 REFERENCES CUSTOMERS (CUSTOMER_ID) ON DELETE CASCADE
);

CREATE TABLE ORDER_DETAILS( 
 ORDER_DETAIL_ID NUMBER PRIMARY KEY,
 ORDER_ID NUMBER,
 PRODUCT_ID NUMBER,
 QUANTITY NUMBER,
 PRICE_PER_UNIT NUMBER,
 CONSTRAINTS FK_ORDERS FOREIGN KEY (ORDER_ID) 
 REFERENCES ORDERS (ORDER_ID) ON DELETE CASCADE,
 CONSTRAINTS FK_PRODUCTS FOREIGN KEY (PRODUCT_ID)
 REFERENCES PRODUCTS (PRODUCT_ID) ON DELETE SET NULL
);

SELECT * FROM CATEGORIES;
SELECT * FROM PRODUCTS;
SELECT * FROM CUSTOMERS;
SELECT * FROM ORDERS;
SELECT * FROM ORDER_DETAILS;

SELECT * FROM CATEGORIES;
INSERT INTO CATEGORIES VALUES (1, '스마트폰');
INSERT INTO CATEGORIES VALUES (2, 'TV');
INSERT INTO CATEGORIES VALUES (3, 'Gaming');

SELECT * FROM PRODUCTS;
INSERT INTO PRODUCTS VALUES (101, 'Apple iPhone12' , 1 , '1500000' , 30);
INSERT INTO PRODUCTS VALUES (102, 'Samsung Galaxy S24' , 1 , '1800000' , 50);
INSERT INTO PRODUCTS VALUES (201, 'LG OLED TV' , 2 , '3600000' , 10);
INSERT INTO PRODUCTS VALUES (301, 'Sony PlayStation 5' , 3 , '70000' , 15);

SELECT * FROM CUSTOMERS;
INSERT INTO CUSTOMERS VALUES (1, '홍길동' , '남' , '서울시 성동구 왕십리' , '010-1111-2222');
INSERT INTO CUSTOMERS VALUES (2, '유관순' , '여' , '서울시 종로구 안국동' , '010-3333-1111');

SELECT * FROM ORDERS;
INSERT INTO ORDERS VALUES (576, '2024-02-29' , 'N' , 1);
INSERT INTO ORDERS VALUES (978, '2024-03-11' , 'Y' , 2);
INSERT INTO ORDERS VALUES (777, '2024-03-11' , 'N' , 2);
INSERT INTO ORDERS VALUES (134, '2022-12-25' , 'Y' , 1);
INSERT INTO ORDERS VALUES (499, '2020-01-03' , 'Y' , 1);

SELECT * FROM ORDER_DETAILS;
INSERT INTO ORDER_DETAILS VALUES (111, 576, 101, 1, '1500000');
INSERT INTO ORDER_DETAILS VALUES (222, 978, 201, 2, '3600000');
INSERT INTO ORDER_DETAILS VALUES (333, 978, 102, 1, '1800000');
INSERT INTO ORDER_DETAILS VALUES (444, 777, 301, 5, '70000');
INSERT INTO ORDER_DETAILS VALUES (555, 134, 102, 1, '1800000');
INSERT INTO ORDER_DETAILS VALUES (666, 499, 201, 3, '3600000');

UPDATE ORDER_DETAILS
   SET PRICE_PER_UNIT = '700000'
 WHERE ORDER_ID = '777'  
;

-- 1. 쇼핑몰 관리자가 주문은 받았으나, 아직 처리가 안된 주문을 처리하려고한다. 
-- 현재 주문 내역 중 아직 처리되지 않은 주문을 조회하시오. 😀
-- (고객명, 주문일, 처리상태)

SELECT NAME 고객명, ORDER_DATE 주문일, STATUS 처리상태
FROM ORDERS 
JOIN CUSTOMERS USING(CUSTOMER_ID)
WHERE STATUS = 'N';

-- 2. 홍길동 고객이 2024년도에 본인이 주문한 전체 내역을 조회하고자 한다.
-- 주문번호, 주문날짜, 처리상태 조회하시오 😀

SELECT ORDER_ID 주문번호, ORDER_DATE 주문날짜, STATUS 처리상태
FROM ORDERS 
JOIN CUSTOMERS USING(CUSTOMER_ID)
WHERE NAME = '홍길동'
AND EXTRACT (YEAR FROM ORDER_DATE) = '2024';

-- 3. 유관순 고객이 지금껏 주문한 상품의 수량 별 금액을 조회하려고 한다.
-- 주문번호, 상품명, 수량, 개별금액, 주문별금액을 조회하시오 😀

--ORDER DETAILS, PRODUCT, ODERS,

SELECT ORDER_ID 주문번호, PRODUCT_NAME 상품명, QUANTITY 수량, 
PRICE_PER_UNIT 개별금액, QUANTITY * PRICE_PER_UNIT
FROM ORDERS 
JOIN ORDER_DETAILS USING(ORDER_ID)
JOIN PRODUCTS USING(PRODUCT_ID)
JOIN CUSTOMERS USING(CUSTOMER_ID)
WHERE NAME ='유관순'
ORDER BY ORDER_ID;

COMMIT;

SELECT * FROM TB_USER;