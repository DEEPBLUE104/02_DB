--부서코드가 노올철 사원과 같은 부서 소속의 직원의
-- 이름, 부서코드 조회

SELECT DEPT_CODE
FROM EMPLOYEE
WHERE EMP_NAME = '노옹철';

SELECT EMP_NAME, DEPT_CODE
FROM EMPLOYEE
WHERE DEPT_CODE = (SELECT DEPT_CODE
										FROM EMPLOYEE
										WHERE EMP_NAME = '노옹철');


--전 직원의 평균 급여보다 많은 급여를 받고 있는 직원의
-- 사번, 이름, 직급코드, 급여 조회

SELECT CEIL(AVG(SALARY)) FROM EMPLOYEE;

SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE 
WHERE SALARY >= (SELECT CEIL(AVG(SALARY)) FROM EMPLOYEE);


-- 전 직원의 급여 평균보다 많은(초과) 급여를 받는 직원의
-- 이름, 직급명, 부서명, 급여를 직급 순으로 정렬하여 조회

SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, SALARY
FROM EMPLOYEE E, JOB J, DEPARTMENT D
WHERE (E.JOB_CODE = J.JOB_CODE)
AND (E.DEPT_CODE = D.DEPT_ID(+))
AND E.SALARY > (SELECT CEIL(AVG(SALARY)) FROM EMPLOYEE);

-- 가장 적은 급여를 받는 직원의
-- 사번, 이름, 직급명, 부서코드, 급여, 입사일 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME, DEPT_CODE, SALARY, HIRE_DATE
FROM EMPLOYEE E, JOB J
WHERE (E.JOB_CODE = J.JOB_CODE)
AND E.SALARY = (SELECT MIN(SALARY) FROM EMPLOYEE);

-- 노옹철 사원의 급여보다 많이 (초과) 받는 직원의
-- 사원, 이름, 부서명, 직급명, 급여 조회

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
LEFT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
WHERE SALARY > (SELECT SALARY FROM EMPLOYEE WHERE EMP_NAME = '노옹철');

-- 부서별(부서가 없는 사람 포함) 급여의 합계 중
-- 가장 큰 부서의 부서명, 급여 합계를 조회

SELECT MAX(SUM(SALARY)) FROM EMPLOYEE GROUP BY DEPT_CODE;

SELECT DEPT_TITLE, SUM(SALARY) 
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY)= (SELECT MAX(SUM(SALARY)) FROM EMPLOYEE GROUP BY DEPT_CODE);

SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE, DEPARTMENT 
WHERE(DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) = (SELECT MAX(SUM(SALARY))
											FROM EMPLOYEE
											GROUP BY DEPT_CODE);

-- 부서별 최고 급여를 받는 직원의
-- 이름, 직급, 부서, 급여를 
-- 부서 오름차순으로 정렬하여 조회

SELECT MAX(SALARY)
FROM EMPLOYEE 
GROUP BY DEPT_CODE;

SELECT EMP_NAME, JOB_CODE, DEPT_CODE, SALARY
FROM EMPLOYEE 
WHERE SALARY IN (SELECT MAX(SALARY)
										 FROM EMPLOYEE 
										 GROUP BY DEPT_CODE)
ORDER BY DEPT_CODE;

-- 사수에 해당하는 직원에 대해 조회
-- 사번, 이름, 부서명, 직급명, 구분(사수/사원) 조회
-- * 사수 == MANAGER_ID 컬럼에 작성된 사번인 사람

SELECT MANAGER_ID
FROM EMPLOYEE
WHERE MANAGER_ID IS NOT NULL;

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, MANAGER_ID, '사원' 구분
FROM EMPLOYEE 
JOIN JOB USING (JOB_CODE)
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE EMP_ID IN (SELECT DISTINCT MANAGER_ID
										FROM EMPLOYEE
										WHERE MANAGER_ID IS NOT NULL)

UNION

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, MANAGER_ID, '사수' 구분
FROM EMPLOYEE 
JOIN JOB USING (JOB_CODE)
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE EMP_ID NOT IN (SELECT DISTINCT MANAGER_ID
										FROM EMPLOYEE
										WHERE MANAGER_ID IS NOT NULL);

-- 대리 직급의 직원들 중에서
-- 과장 직급의 최소 급여보다
-- 많이 받는 직원의
-- 사번, 이름, 직급명, 급여 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE JOB_NAME = '대리'
AND SALARY > ANY (SELECT MIN(SALARY) FROM EMPLOYEE 
								JOIN JOB USING(JOB_CODE)
								WHERE JOB_NAME = '과장');

-- 대리 직급의 직원들 중에서
-- 과장 직급의 최소 급여보다
-- 많이 받는 직원의
-- 사번, 이름, 직급명, 급여 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE JOB_NAME = '대리'
AND SALARY > (SELECT MIN(SALARY) FROM EMPLOYEE 
								JOIN JOB USING(JOB_CODE)
								WHERE JOB_NAME = '과장');
									
-- 차장 직급의 급여 중 가장 큰 값보다 많이 받는 과장 직급의 직원
-- 사번, 이름, 직급, 급여 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
WHERE JOB_NAME = '과장'
AND SALARY > ALL (SELECT MAX(SALARY) FROM EMPLOYEE 
								JOIN JOB USING(JOB_CODE)
								WHERE JOB_NAME = '차장');
									
-- LOCATION 테이블에서 NATIONAL_CODE가 KO인 경우의 LOCAL_CODE와
-- DEPARTMENT 테이블의 LOCATION_ID와 동일한 DEPT_ID 가
-- EMPLOYEE 테이블의 DEPT_CODE와 동일한 사원을 조회해라 

SELECT LOCAL_CODE
FROM LOCATION 
WHERE NATIONAL_CODE = 'KO';

SELECT DEPT_CODE
FROM DEPARTMENT 
LEFT JOIN EMPLOYEE ON(DEPT_CODE=DEPT_ID)
WHERE LOCATION_ID = (SELECT LOCAL_CODE
										 FROM LOCATION 
										 WHERE NATIONAL_CODE = 'KO');

SELECT EMP_NAME, DEPT_CODE
FROM EMPLOYEE 
WHERE DEPT_CODE IN (SELECT DEPT_CODE
									 FROM DEPARTMENT 
				  				 LEFT JOIN EMPLOYEE ON(DEPT_CODE=DEPT_ID)
								   WHERE LOCATION_ID = (SELECT LOCAL_CODE
																				FROM LOCATION 
																				WHERE NATIONAL_CODE = 'KO'));

-- 퇴사한 여직원과 같은 부서, 같은 직급에 해당하는 
-- 사원의 이름, 직급코드, 부서코드, 입사일 조회

-- 1. 노옹철 사원과 같은 부서, 같은 직급인 사원을 조회(단, 노옹철 제외)
-- 사번, 이름, 부서코드, 직급코드, 부서명, 직급명

-- 2. 2000년도에 입사한 사원의 부서와 직급이 같은 사원을 조회
--	사번, 이름, 부서코드, 직급코드, 입사일

-- 3. 77년생 여자 사원과 동일한 부서이면서 동일한 사수를 가지고 있는 사원 조회
--  사번, 이름, 부서코드, 사수번호, 주민번호, 입사일

-- 본인이 소속된 직급의 평균 급여를 받고 있는 직원의
-- 사번, 이름, 직급코드, 급여 조회
-- 단, 급여와 급여 평균은 만원 단위로 조회 TRUNC(컬럼명, -4)



----------------------------------------------

-- 1. 전지연 사원이 속해있는 부서원들을 조회하시오 (단, 전지연은 제외)
-- 사번, 사원명, 전화번호, 고용일, 부서명

SELECT DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE EMP_NAME = '전지연';


SELECT EMP_ID, EMP_NAME, PHONE, HIRE_DATE
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE DEPT_TITLE = (SELECT DEPT_TITLE
										FROM EMPLOYEE
										LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
										WHERE EMP_NAME = '전지연')
AND EMP_NAME != '전지연';										


-- 2. 고용일이 2000년도 이후인 사원들 중 급여가 가장 높은 사원의
-- 사번, 사원명, 전화번호, 급여 ,직급명을 조회하시오

SELECT MAX(SALARY) 
FROM EMPLOYEE
WHERE EXTRACT(YEAR FROM HIRE_DATE)  >= '2000';

SELECT EMP_ID, EMP_NAME, PHONE, SALARY, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE SALARY = (SELECT MAX(SALARY) 
								FROM EMPLOYEE
		  					WHERE EXTRACT(YEAR FROM HIRE_DATE)  >= '2000');

-- 3. 노옹철 사원과 같은 부서, 같은 직급인 사원을 조회하시오. (단, 노옹철 사원은 제외)
-- 사번, 이름, 부서코드, 직급코드, 부서명, 직급명

SELECT DEPT_CODE, JOB_NAME 
FROM EMPLOYEE 
JOIN JOB USING (JOB_CODE)
WHERE EMP_NAME = '노옹철';

SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE (DEPT_CODE, JOB_NAME) IN (SELECT DEPT_CODE, JOB_NAME 
																FROM EMPLOYEE 
																JOIN JOB USING (JOB_CODE)
																WHERE EMP_NAME = '노옹철')
AND EMP_NAME != '노옹철';

-- 4. 2000년도에 입사한 사원과 부서와 직급이 같은 사원을 조회하시오
-- 사번, 이름, 부서코드, 직급코드, 고용일

SELECT DEPT_CODE, JOB_CODE
FROM EMPLOYEE 
WHERE EXTRACT (YEAR FROM HIRE_DATE) = '2000';

SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE, HIRE_DATE
FROM EMPLOYEE
WHERE (DEPT_CODE, JOB_CODE) IN (SELECT DEPT_CODE, JOB_CODE
																FROM EMPLOYEE 
																WHERE EXTRACT (YEAR FROM HIRE_DATE) = '2000');


-- 5. 77년생 여자 사원과 동일한 부서이면서 동일한 사수를 가지고 있는 사원을 조회하시오
-- 사번, 이름, 부서코드, 사수번호, 주민번호, 고용일


SELECT EMP_ID, EMP_NAME, DEPT_CODE, MANAGER_ID, EMP_NO, HIRE_DATE
FROM EMPLOYEE
WHERE (DEPT_CODE, MANAGER_ID) = (SELECT DEPT_CODE, MANAGER_ID
																				 FROM EMPLOYEE
															   				 WHERE SUBSTR(EMP_NO,1,2) = '77'
																 				 AND SUBSTR(EMP_NO,8,1) = '2');

SELECT EMP_ID, EMP_NAME, DEPT_TITLE, MANAGER_ID
FROM EMPLOYEE MAIN
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE MANAGER_ID = (SELECT EMP_ID 
									 	FROM EMPLOYEE SUB
										WHERE SUB.EMP_ID = MAIN.MANAGER_ID);

-- 6. 부서별 입사일이 가장 빠른 사원의 
-- 사번, 이름, 부서명(NULL이면 '소속없음'), 직급명, 입사일을 조회하고
-- 입사일이 빠른 순으로 조회하시오
-- 단, 퇴사한 직원은 제외하고 조회


SELECT EMP_ID, EMP_NAME, NVL(DEPT_TITLE, '소속없음'), JOB_NAME, HIRE_DATE
FROM EMPLOYEE 
JOIN JOB USING(JOB_CODE)
LEFT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
WHERE HIRE_DATE IN (SELECT MIN(HIRE_DATE)
										FROM EMPLOYEE 
										GROUP BY DEPT_CODE)	
AND ENT_YN = 'N'
ORDER BY HIRE_DATE;
-- 내가 쓴 오답. 퇴사자가 가장 빨리 나가서 정답이 나오지 않았음..
-- 밑의 구문을 참고해서 다시 공부합시다
-- 지피티 말로는 GROUP BY로 묶이지 않은 이유가 한 부서당 한 개의 결과를 
-- 내는 단일값이라는데 아직 모르겠음!!


SELECT EMP_ID, EMP_NAME, NVL(DEPT_TITLE, '소속없음'), 
JOB_NAME, HIRE_DATE
FROM EMPLOYEE MAIN
JOIN JOB USING (JOB_CODE)
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
WHERE HIRE_DATE = (SELECT MIN(HIRE_DATE)
									FROM EMPLOYEE SUB
									WHERE MAIN.DEPT_CODE  = SUB.DEPT_CODE
									AND ENT_YN = 'N'
									OR (SUB.DEPT_CODE IS NULL AND MAIN.DEPT_CODE IS NULL))
ORDER BY HIRE_DATE;


-- 7. 직급별 나이가 가장 어린 직원의
-- 사번, 이름, 직급명, 나이, 보너스 포함 연봉을 조회하고
-- 나이순으로 내림차순 정렬하세요
-- 단 연봉은 달러 124,800,800 으로 출력되게 하세요

-- 다중행 서브쿼리
SELECT EMP_ID, EMP_NAME, JOB_NAME,
FLOOR(MONTHS_BETWEEN(SYSDATE, TO_DATE(SUBSTR(EMP_NO, 1, 6),'RRMMDD')) / 12) "나이",
TO_CHAR(SASLARY * (1 + NVL(BONUS, 0)) * 12, 'L999,999,999') "보너스 포함 연봉"
FROM EMPLOYEE 
JOIN JOB USING(JOB_CODE)
WHERE EMP_NO IN (SELECT MAX(EMP_NO) FROM EMPLOYEE GROUP BY JOB_CODE)
ORDER BY "나이" DESC;

-- 상관쿼리
SELECT JOB_CODE, EMP_ID, EMP_NAME, JOB_NAME,
FLOOR(MONTHS_BETW)